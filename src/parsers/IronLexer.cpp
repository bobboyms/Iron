
// Generated from Iron.g4 by ANTLR 4.13.2


#include "IronLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct IronLexerStaticData final {
  IronLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  IronLexerStaticData(const IronLexerStaticData&) = delete;
  IronLexerStaticData(IronLexerStaticData&&) = delete;
  IronLexerStaticData& operator=(const IronLexerStaticData&) = delete;
  IronLexerStaticData& operator=(IronLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag ironlexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<IronLexerStaticData> ironlexerLexerStaticData = nullptr;

void ironlexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (ironlexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(ironlexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<IronLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "LINE_COMMENT", "BLOCK_COMMENT", 
      "COMMA", "COLON", "EQ", "SEMICOLON", "DOT", "STAR", "L_CURLY", "R_CURLY", 
      "L_PAREN", "R_PAREN", "PLUS", "MINUS", "DIV", "L_BRACKET", "R_BRACKET", 
      "ARROW", "AND", "OR", "NOT", "EQEQ", "NEQ", "LT", "LTE", "GT", "GTE", 
      "IF", "FUNCTION", "LET", "MUT", "ELSE", "PUBLIC", "IMPORT", "RETURN", 
      "IN", "FOR", "WHILE", "TYPE_INT", "TYPE_CHAR", "TYPE_FLOAT", "TYPE_STRING", 
      "TYPE_BOOLEAN", "TYPE_DOUBLE", "TYPE_VOID", "REPEAT", "STRUCT", "OPTIONS", 
      "CONTINUE", "BREAK", "REAL_NUMBER", "INT_NUMBER", "BOOLEAN_VALUE", 
      "STRING_LITERAL", "IDENTIFIER", "NEWLINE", "WS"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'..'", "'f'('", "'extern'", "'...'", "'%'", "", "", "','", "':'", 
      "'='", "';'", "'.'", "'*'", "'{'", "'}'", "'('", "')'", "'+'", "'-'", 
      "'/'", "'['", "']'", "'->'", "'and'", "'or'", "'not'", "'=='", "'!='", 
      "'<'", "'<='", "'>'", "'>='", "'if'", "'fn'", "'let'", "'mut'", "'else'", 
      "'public'", "'import'", "'return'", "'in'", "'for'", "'while'", "'int'", 
      "'char'", "'float'", "'string'", "'boolean'", "'double'", "'void'", 
      "'repeat'", "'struct'", "'options'", "'continue'", "'break'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "LINE_COMMENT", "BLOCK_COMMENT", "COMMA", 
      "COLON", "EQ", "SEMICOLON", "DOT", "STAR", "L_CURLY", "R_CURLY", "L_PAREN", 
      "R_PAREN", "PLUS", "MINUS", "DIV", "L_BRACKET", "R_BRACKET", "ARROW", 
      "AND", "OR", "NOT", "EQEQ", "NEQ", "LT", "LTE", "GT", "GTE", "IF", 
      "FUNCTION", "LET", "MUT", "ELSE", "PUBLIC", "IMPORT", "RETURN", "IN", 
      "FOR", "WHILE", "TYPE_INT", "TYPE_CHAR", "TYPE_FLOAT", "TYPE_STRING", 
      "TYPE_BOOLEAN", "TYPE_DOUBLE", "TYPE_VOID", "REPEAT", "STRUCT", "OPTIONS", 
      "CONTINUE", "BREAK", "REAL_NUMBER", "INT_NUMBER", "BOOLEAN_VALUE", 
      "STRING_LITERAL", "IDENTIFIER", "NEWLINE", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,62,439,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,1,0,1,0,1,0,1,
  	1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,5,
  	1,5,1,5,1,5,5,5,150,8,5,10,5,12,5,153,9,5,1,5,1,5,1,6,1,6,1,6,1,6,5,6,
  	161,8,6,10,6,12,6,164,9,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,
  	1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,
  	1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,
  	1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,27,
  	1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,
  	1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,1,36,
  	1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,
  	1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,41,
  	1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,44,
  	1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,
  	1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,
  	1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,
  	1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,
  	1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,
  	1,54,1,54,1,54,1,54,1,55,3,55,364,8,55,1,55,4,55,367,8,55,11,55,12,55,
  	368,1,55,1,55,4,55,373,8,55,11,55,12,55,374,1,55,1,55,3,55,379,8,55,1,
  	55,4,55,382,8,55,11,55,12,55,383,3,55,386,8,55,1,55,3,55,389,8,55,1,56,
  	3,56,392,8,56,1,56,4,56,395,8,56,11,56,12,56,396,1,57,1,57,1,57,1,57,
  	1,57,1,57,1,57,1,57,1,57,3,57,408,8,57,1,58,1,58,5,58,412,8,58,10,58,
  	12,58,415,9,58,1,58,1,58,1,59,1,59,5,59,421,8,59,10,59,12,59,424,9,59,
  	1,60,3,60,427,8,60,1,60,1,60,1,60,1,60,1,61,4,61,434,8,61,11,61,12,61,
  	435,1,61,1,61,1,162,0,62,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
  	21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
  	22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
  	67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,
  	45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,
  	56,113,57,115,58,117,59,119,60,121,61,123,62,1,0,9,2,0,10,10,13,13,1,
  	0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,2,0,68,68,70,70,3,0,10,10,13,
  	13,34,34,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,9,9,
  	32,32,454,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
  	0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
  	1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
  	0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
  	0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
  	1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
  	0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,
  	0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,
  	1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,
  	0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,
  	0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,
  	0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,1,125,1,0,0,
  	0,3,128,1,0,0,0,5,132,1,0,0,0,7,139,1,0,0,0,9,143,1,0,0,0,11,145,1,0,
  	0,0,13,156,1,0,0,0,15,170,1,0,0,0,17,172,1,0,0,0,19,174,1,0,0,0,21,176,
  	1,0,0,0,23,178,1,0,0,0,25,180,1,0,0,0,27,182,1,0,0,0,29,184,1,0,0,0,31,
  	186,1,0,0,0,33,188,1,0,0,0,35,190,1,0,0,0,37,192,1,0,0,0,39,194,1,0,0,
  	0,41,196,1,0,0,0,43,198,1,0,0,0,45,200,1,0,0,0,47,203,1,0,0,0,49,207,
  	1,0,0,0,51,210,1,0,0,0,53,214,1,0,0,0,55,217,1,0,0,0,57,220,1,0,0,0,59,
  	222,1,0,0,0,61,225,1,0,0,0,63,227,1,0,0,0,65,230,1,0,0,0,67,233,1,0,0,
  	0,69,236,1,0,0,0,71,240,1,0,0,0,73,244,1,0,0,0,75,249,1,0,0,0,77,256,
  	1,0,0,0,79,263,1,0,0,0,81,270,1,0,0,0,83,273,1,0,0,0,85,277,1,0,0,0,87,
  	283,1,0,0,0,89,287,1,0,0,0,91,292,1,0,0,0,93,298,1,0,0,0,95,305,1,0,0,
  	0,97,313,1,0,0,0,99,320,1,0,0,0,101,325,1,0,0,0,103,332,1,0,0,0,105,339,
  	1,0,0,0,107,347,1,0,0,0,109,356,1,0,0,0,111,363,1,0,0,0,113,391,1,0,0,
  	0,115,407,1,0,0,0,117,409,1,0,0,0,119,418,1,0,0,0,121,426,1,0,0,0,123,
  	433,1,0,0,0,125,126,5,46,0,0,126,127,5,46,0,0,127,2,1,0,0,0,128,129,5,
  	102,0,0,129,130,5,39,0,0,130,131,5,40,0,0,131,4,1,0,0,0,132,133,5,101,
  	0,0,133,134,5,120,0,0,134,135,5,116,0,0,135,136,5,101,0,0,136,137,5,114,
  	0,0,137,138,5,110,0,0,138,6,1,0,0,0,139,140,5,46,0,0,140,141,5,46,0,0,
  	141,142,5,46,0,0,142,8,1,0,0,0,143,144,5,37,0,0,144,10,1,0,0,0,145,146,
  	5,47,0,0,146,147,5,47,0,0,147,151,1,0,0,0,148,150,8,0,0,0,149,148,1,0,
  	0,0,150,153,1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,154,1,0,0,0,153,
  	151,1,0,0,0,154,155,6,5,0,0,155,12,1,0,0,0,156,157,5,47,0,0,157,158,5,
  	42,0,0,158,162,1,0,0,0,159,161,9,0,0,0,160,159,1,0,0,0,161,164,1,0,0,
  	0,162,163,1,0,0,0,162,160,1,0,0,0,163,165,1,0,0,0,164,162,1,0,0,0,165,
  	166,5,42,0,0,166,167,5,47,0,0,167,168,1,0,0,0,168,169,6,6,0,0,169,14,
  	1,0,0,0,170,171,5,44,0,0,171,16,1,0,0,0,172,173,5,58,0,0,173,18,1,0,0,
  	0,174,175,5,61,0,0,175,20,1,0,0,0,176,177,5,59,0,0,177,22,1,0,0,0,178,
  	179,5,46,0,0,179,24,1,0,0,0,180,181,5,42,0,0,181,26,1,0,0,0,182,183,5,
  	123,0,0,183,28,1,0,0,0,184,185,5,125,0,0,185,30,1,0,0,0,186,187,5,40,
  	0,0,187,32,1,0,0,0,188,189,5,41,0,0,189,34,1,0,0,0,190,191,5,43,0,0,191,
  	36,1,0,0,0,192,193,5,45,0,0,193,38,1,0,0,0,194,195,5,47,0,0,195,40,1,
  	0,0,0,196,197,5,91,0,0,197,42,1,0,0,0,198,199,5,93,0,0,199,44,1,0,0,0,
  	200,201,5,45,0,0,201,202,5,62,0,0,202,46,1,0,0,0,203,204,5,97,0,0,204,
  	205,5,110,0,0,205,206,5,100,0,0,206,48,1,0,0,0,207,208,5,111,0,0,208,
  	209,5,114,0,0,209,50,1,0,0,0,210,211,5,110,0,0,211,212,5,111,0,0,212,
  	213,5,116,0,0,213,52,1,0,0,0,214,215,5,61,0,0,215,216,5,61,0,0,216,54,
  	1,0,0,0,217,218,5,33,0,0,218,219,5,61,0,0,219,56,1,0,0,0,220,221,5,60,
  	0,0,221,58,1,0,0,0,222,223,5,60,0,0,223,224,5,61,0,0,224,60,1,0,0,0,225,
  	226,5,62,0,0,226,62,1,0,0,0,227,228,5,62,0,0,228,229,5,61,0,0,229,64,
  	1,0,0,0,230,231,5,105,0,0,231,232,5,102,0,0,232,66,1,0,0,0,233,234,5,
  	102,0,0,234,235,5,110,0,0,235,68,1,0,0,0,236,237,5,108,0,0,237,238,5,
  	101,0,0,238,239,5,116,0,0,239,70,1,0,0,0,240,241,5,109,0,0,241,242,5,
  	117,0,0,242,243,5,116,0,0,243,72,1,0,0,0,244,245,5,101,0,0,245,246,5,
  	108,0,0,246,247,5,115,0,0,247,248,5,101,0,0,248,74,1,0,0,0,249,250,5,
  	112,0,0,250,251,5,117,0,0,251,252,5,98,0,0,252,253,5,108,0,0,253,254,
  	5,105,0,0,254,255,5,99,0,0,255,76,1,0,0,0,256,257,5,105,0,0,257,258,5,
  	109,0,0,258,259,5,112,0,0,259,260,5,111,0,0,260,261,5,114,0,0,261,262,
  	5,116,0,0,262,78,1,0,0,0,263,264,5,114,0,0,264,265,5,101,0,0,265,266,
  	5,116,0,0,266,267,5,117,0,0,267,268,5,114,0,0,268,269,5,110,0,0,269,80,
  	1,0,0,0,270,271,5,105,0,0,271,272,5,110,0,0,272,82,1,0,0,0,273,274,5,
  	102,0,0,274,275,5,111,0,0,275,276,5,114,0,0,276,84,1,0,0,0,277,278,5,
  	119,0,0,278,279,5,104,0,0,279,280,5,105,0,0,280,281,5,108,0,0,281,282,
  	5,101,0,0,282,86,1,0,0,0,283,284,5,105,0,0,284,285,5,110,0,0,285,286,
  	5,116,0,0,286,88,1,0,0,0,287,288,5,99,0,0,288,289,5,104,0,0,289,290,5,
  	97,0,0,290,291,5,114,0,0,291,90,1,0,0,0,292,293,5,102,0,0,293,294,5,108,
  	0,0,294,295,5,111,0,0,295,296,5,97,0,0,296,297,5,116,0,0,297,92,1,0,0,
  	0,298,299,5,115,0,0,299,300,5,116,0,0,300,301,5,114,0,0,301,302,5,105,
  	0,0,302,303,5,110,0,0,303,304,5,103,0,0,304,94,1,0,0,0,305,306,5,98,0,
  	0,306,307,5,111,0,0,307,308,5,111,0,0,308,309,5,108,0,0,309,310,5,101,
  	0,0,310,311,5,97,0,0,311,312,5,110,0,0,312,96,1,0,0,0,313,314,5,100,0,
  	0,314,315,5,111,0,0,315,316,5,117,0,0,316,317,5,98,0,0,317,318,5,108,
  	0,0,318,319,5,101,0,0,319,98,1,0,0,0,320,321,5,118,0,0,321,322,5,111,
  	0,0,322,323,5,105,0,0,323,324,5,100,0,0,324,100,1,0,0,0,325,326,5,114,
  	0,0,326,327,5,101,0,0,327,328,5,112,0,0,328,329,5,101,0,0,329,330,5,97,
  	0,0,330,331,5,116,0,0,331,102,1,0,0,0,332,333,5,115,0,0,333,334,5,116,
  	0,0,334,335,5,114,0,0,335,336,5,117,0,0,336,337,5,99,0,0,337,338,5,116,
  	0,0,338,104,1,0,0,0,339,340,5,111,0,0,340,341,5,112,0,0,341,342,5,116,
  	0,0,342,343,5,105,0,0,343,344,5,111,0,0,344,345,5,110,0,0,345,346,5,115,
  	0,0,346,106,1,0,0,0,347,348,5,99,0,0,348,349,5,111,0,0,349,350,5,110,
  	0,0,350,351,5,116,0,0,351,352,5,105,0,0,352,353,5,110,0,0,353,354,5,117,
  	0,0,354,355,5,101,0,0,355,108,1,0,0,0,356,357,5,98,0,0,357,358,5,114,
  	0,0,358,359,5,101,0,0,359,360,5,97,0,0,360,361,5,107,0,0,361,110,1,0,
  	0,0,362,364,5,45,0,0,363,362,1,0,0,0,363,364,1,0,0,0,364,366,1,0,0,0,
  	365,367,7,1,0,0,366,365,1,0,0,0,367,368,1,0,0,0,368,366,1,0,0,0,368,369,
  	1,0,0,0,369,370,1,0,0,0,370,372,5,46,0,0,371,373,7,1,0,0,372,371,1,0,
  	0,0,373,374,1,0,0,0,374,372,1,0,0,0,374,375,1,0,0,0,375,385,1,0,0,0,376,
  	378,7,2,0,0,377,379,7,3,0,0,378,377,1,0,0,0,378,379,1,0,0,0,379,381,1,
  	0,0,0,380,382,7,1,0,0,381,380,1,0,0,0,382,383,1,0,0,0,383,381,1,0,0,0,
  	383,384,1,0,0,0,384,386,1,0,0,0,385,376,1,0,0,0,385,386,1,0,0,0,386,388,
  	1,0,0,0,387,389,7,4,0,0,388,387,1,0,0,0,388,389,1,0,0,0,389,112,1,0,0,
  	0,390,392,5,45,0,0,391,390,1,0,0,0,391,392,1,0,0,0,392,394,1,0,0,0,393,
  	395,7,1,0,0,394,393,1,0,0,0,395,396,1,0,0,0,396,394,1,0,0,0,396,397,1,
  	0,0,0,397,114,1,0,0,0,398,399,5,116,0,0,399,400,5,114,0,0,400,401,5,117,
  	0,0,401,408,5,101,0,0,402,403,5,102,0,0,403,404,5,97,0,0,404,405,5,108,
  	0,0,405,406,5,115,0,0,406,408,5,101,0,0,407,398,1,0,0,0,407,402,1,0,0,
  	0,408,116,1,0,0,0,409,413,5,34,0,0,410,412,8,5,0,0,411,410,1,0,0,0,412,
  	415,1,0,0,0,413,411,1,0,0,0,413,414,1,0,0,0,414,416,1,0,0,0,415,413,1,
  	0,0,0,416,417,5,34,0,0,417,118,1,0,0,0,418,422,7,6,0,0,419,421,7,7,0,
  	0,420,419,1,0,0,0,421,424,1,0,0,0,422,420,1,0,0,0,422,423,1,0,0,0,423,
  	120,1,0,0,0,424,422,1,0,0,0,425,427,5,13,0,0,426,425,1,0,0,0,426,427,
  	1,0,0,0,427,428,1,0,0,0,428,429,5,10,0,0,429,430,1,0,0,0,430,431,6,60,
  	0,0,431,122,1,0,0,0,432,434,7,8,0,0,433,432,1,0,0,0,434,435,1,0,0,0,435,
  	433,1,0,0,0,435,436,1,0,0,0,436,437,1,0,0,0,437,438,6,61,0,0,438,124,
  	1,0,0,0,17,0,151,162,363,368,374,378,383,385,388,391,396,407,413,422,
  	426,435,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  ironlexerLexerStaticData = std::move(staticData);
}

}

IronLexer::IronLexer(CharStream *input) : Lexer(input) {
  IronLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *ironlexerLexerStaticData->atn, ironlexerLexerStaticData->decisionToDFA, ironlexerLexerStaticData->sharedContextCache);
}

IronLexer::~IronLexer() {
  delete _interpreter;
}

std::string IronLexer::getGrammarFileName() const {
  return "Iron.g4";
}

const std::vector<std::string>& IronLexer::getRuleNames() const {
  return ironlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& IronLexer::getChannelNames() const {
  return ironlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& IronLexer::getModeNames() const {
  return ironlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& IronLexer::getVocabulary() const {
  return ironlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView IronLexer::getSerializedATN() const {
  return ironlexerLexerStaticData->serializedATN;
}

const atn::ATN& IronLexer::getATN() const {
  return *ironlexerLexerStaticData->atn;
}




void IronLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  ironlexerLexerInitialize();
#else
  ::antlr4::internal::call_once(ironlexerLexerOnceFlag, ironlexerLexerInitialize);
#endif
}
