
// Generated from Iron.g4 by ANTLR 4.13.2


#include "IronLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct IronLexerStaticData final {
  IronLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  IronLexerStaticData(const IronLexerStaticData&) = delete;
  IronLexerStaticData(IronLexerStaticData&&) = delete;
  IronLexerStaticData& operator=(const IronLexerStaticData&) = delete;
  IronLexerStaticData& operator=(IronLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag ironlexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<IronLexerStaticData> ironlexerLexerStaticData = nullptr;

void ironlexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (ironlexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(ironlexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<IronLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "LINE_COMMENT", "BLOCK_COMMENT", "COMMA", 
      "COLON", "EQ", "SEMICOLON", "DOT", "STAR", "L_CURLY", "R_CURLY", "L_PAREN", 
      "R_PAREN", "PLUS", "MINUS", "DIV", "L_BRACKET", "R_BRACKET", "ARROW", 
      "AND", "OR", "NOT", "EQEQ", "NEQ", "LT", "LTE", "GT", "GTE", "IF", 
      "FUNCTION", "LET", "ELSE", "PUBLIC", "IMPORT", "RETURN", "TYPE_INT", 
      "TYPE_CHAR", "TYPE_FLOAT", "TYPE_STRING", "TYPE_BOOLEAN", "TYPE_DOUBLE", 
      "TYPE_VOID", "REAL_NUMBER", "INT_NUMBER", "BOOLEAN_VALUE", "STRING_LITERAL", 
      "IDENTIFIER", "NEWLINE", "WS"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'f'('", "'extern'", "'...'", "'%'", "", "", "','", "':'", "'='", 
      "';'", "'.'", "'*'", "'{'", "'}'", "'('", "')'", "'+'", "'-'", "'/'", 
      "'['", "']'", "'->'", "'and'", "'or'", "'not'", "'=='", "'!='", "'<'", 
      "'<='", "'>'", "'>='", "'if'", "'fn'", "'let'", "'else'", "'public'", 
      "'import'", "'return'", "'int'", "'char'", "'float'", "'string'", 
      "'boolean'", "'double'", "'void'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "LINE_COMMENT", "BLOCK_COMMENT", "COMMA", "COLON", 
      "EQ", "SEMICOLON", "DOT", "STAR", "L_CURLY", "R_CURLY", "L_PAREN", 
      "R_PAREN", "PLUS", "MINUS", "DIV", "L_BRACKET", "R_BRACKET", "ARROW", 
      "AND", "OR", "NOT", "EQEQ", "NEQ", "LT", "LTE", "GT", "GTE", "IF", 
      "FUNCTION", "LET", "ELSE", "PUBLIC", "IMPORT", "RETURN", "TYPE_INT", 
      "TYPE_CHAR", "TYPE_FLOAT", "TYPE_STRING", "TYPE_BOOLEAN", "TYPE_DOUBLE", 
      "TYPE_VOID", "REAL_NUMBER", "INT_NUMBER", "BOOLEAN_VALUE", "STRING_LITERAL", 
      "IDENTIFIER", "NEWLINE", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,52,362,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
  	1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,5,4,127,8,4,10,4,12,4,130,9,4,
  	1,4,1,4,1,5,1,5,1,5,1,5,5,5,138,8,5,10,5,12,5,141,9,5,1,5,1,5,1,5,1,5,
  	1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,
  	1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,
  	1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,
  	1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,
  	1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,
  	1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,
  	1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,
  	1,38,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,
  	1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,
  	1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,45,3,45,287,
  	8,45,1,45,4,45,290,8,45,11,45,12,45,291,1,45,1,45,4,45,296,8,45,11,45,
  	12,45,297,1,45,1,45,3,45,302,8,45,1,45,4,45,305,8,45,11,45,12,45,306,
  	3,45,309,8,45,1,45,3,45,312,8,45,1,46,3,46,315,8,46,1,46,4,46,318,8,46,
  	11,46,12,46,319,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,331,
  	8,47,1,48,1,48,5,48,335,8,48,10,48,12,48,338,9,48,1,48,1,48,1,49,1,49,
  	5,49,344,8,49,10,49,12,49,347,9,49,1,50,3,50,350,8,50,1,50,1,50,1,50,
  	1,50,1,51,4,51,357,8,51,11,51,12,51,358,1,51,1,51,1,139,0,52,1,1,3,2,
  	5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
  	16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
  	55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,
  	39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,
  	101,51,103,52,1,0,9,2,0,10,10,13,13,1,0,48,57,2,0,69,69,101,101,2,0,43,
  	43,45,45,2,0,68,68,70,70,3,0,10,10,13,13,34,34,3,0,65,90,95,95,97,122,
  	4,0,48,57,65,90,95,95,97,122,2,0,9,9,32,32,377,0,1,1,0,0,0,0,3,1,0,0,
  	0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
  	1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
  	0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
  	0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
  	1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,
  	0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,
  	0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
  	1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,
  	0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,
  	0,101,1,0,0,0,0,103,1,0,0,0,1,105,1,0,0,0,3,109,1,0,0,0,5,116,1,0,0,0,
  	7,120,1,0,0,0,9,122,1,0,0,0,11,133,1,0,0,0,13,147,1,0,0,0,15,149,1,0,
  	0,0,17,151,1,0,0,0,19,153,1,0,0,0,21,155,1,0,0,0,23,157,1,0,0,0,25,159,
  	1,0,0,0,27,161,1,0,0,0,29,163,1,0,0,0,31,165,1,0,0,0,33,167,1,0,0,0,35,
  	169,1,0,0,0,37,171,1,0,0,0,39,173,1,0,0,0,41,175,1,0,0,0,43,177,1,0,0,
  	0,45,180,1,0,0,0,47,184,1,0,0,0,49,187,1,0,0,0,51,191,1,0,0,0,53,194,
  	1,0,0,0,55,197,1,0,0,0,57,199,1,0,0,0,59,202,1,0,0,0,61,204,1,0,0,0,63,
  	207,1,0,0,0,65,210,1,0,0,0,67,213,1,0,0,0,69,217,1,0,0,0,71,222,1,0,0,
  	0,73,229,1,0,0,0,75,236,1,0,0,0,77,243,1,0,0,0,79,247,1,0,0,0,81,252,
  	1,0,0,0,83,258,1,0,0,0,85,265,1,0,0,0,87,273,1,0,0,0,89,280,1,0,0,0,91,
  	286,1,0,0,0,93,314,1,0,0,0,95,330,1,0,0,0,97,332,1,0,0,0,99,341,1,0,0,
  	0,101,349,1,0,0,0,103,356,1,0,0,0,105,106,5,102,0,0,106,107,5,39,0,0,
  	107,108,5,40,0,0,108,2,1,0,0,0,109,110,5,101,0,0,110,111,5,120,0,0,111,
  	112,5,116,0,0,112,113,5,101,0,0,113,114,5,114,0,0,114,115,5,110,0,0,115,
  	4,1,0,0,0,116,117,5,46,0,0,117,118,5,46,0,0,118,119,5,46,0,0,119,6,1,
  	0,0,0,120,121,5,37,0,0,121,8,1,0,0,0,122,123,5,47,0,0,123,124,5,47,0,
  	0,124,128,1,0,0,0,125,127,8,0,0,0,126,125,1,0,0,0,127,130,1,0,0,0,128,
  	126,1,0,0,0,128,129,1,0,0,0,129,131,1,0,0,0,130,128,1,0,0,0,131,132,6,
  	4,0,0,132,10,1,0,0,0,133,134,5,47,0,0,134,135,5,42,0,0,135,139,1,0,0,
  	0,136,138,9,0,0,0,137,136,1,0,0,0,138,141,1,0,0,0,139,140,1,0,0,0,139,
  	137,1,0,0,0,140,142,1,0,0,0,141,139,1,0,0,0,142,143,5,42,0,0,143,144,
  	5,47,0,0,144,145,1,0,0,0,145,146,6,5,0,0,146,12,1,0,0,0,147,148,5,44,
  	0,0,148,14,1,0,0,0,149,150,5,58,0,0,150,16,1,0,0,0,151,152,5,61,0,0,152,
  	18,1,0,0,0,153,154,5,59,0,0,154,20,1,0,0,0,155,156,5,46,0,0,156,22,1,
  	0,0,0,157,158,5,42,0,0,158,24,1,0,0,0,159,160,5,123,0,0,160,26,1,0,0,
  	0,161,162,5,125,0,0,162,28,1,0,0,0,163,164,5,40,0,0,164,30,1,0,0,0,165,
  	166,5,41,0,0,166,32,1,0,0,0,167,168,5,43,0,0,168,34,1,0,0,0,169,170,5,
  	45,0,0,170,36,1,0,0,0,171,172,5,47,0,0,172,38,1,0,0,0,173,174,5,91,0,
  	0,174,40,1,0,0,0,175,176,5,93,0,0,176,42,1,0,0,0,177,178,5,45,0,0,178,
  	179,5,62,0,0,179,44,1,0,0,0,180,181,5,97,0,0,181,182,5,110,0,0,182,183,
  	5,100,0,0,183,46,1,0,0,0,184,185,5,111,0,0,185,186,5,114,0,0,186,48,1,
  	0,0,0,187,188,5,110,0,0,188,189,5,111,0,0,189,190,5,116,0,0,190,50,1,
  	0,0,0,191,192,5,61,0,0,192,193,5,61,0,0,193,52,1,0,0,0,194,195,5,33,0,
  	0,195,196,5,61,0,0,196,54,1,0,0,0,197,198,5,60,0,0,198,56,1,0,0,0,199,
  	200,5,60,0,0,200,201,5,61,0,0,201,58,1,0,0,0,202,203,5,62,0,0,203,60,
  	1,0,0,0,204,205,5,62,0,0,205,206,5,61,0,0,206,62,1,0,0,0,207,208,5,105,
  	0,0,208,209,5,102,0,0,209,64,1,0,0,0,210,211,5,102,0,0,211,212,5,110,
  	0,0,212,66,1,0,0,0,213,214,5,108,0,0,214,215,5,101,0,0,215,216,5,116,
  	0,0,216,68,1,0,0,0,217,218,5,101,0,0,218,219,5,108,0,0,219,220,5,115,
  	0,0,220,221,5,101,0,0,221,70,1,0,0,0,222,223,5,112,0,0,223,224,5,117,
  	0,0,224,225,5,98,0,0,225,226,5,108,0,0,226,227,5,105,0,0,227,228,5,99,
  	0,0,228,72,1,0,0,0,229,230,5,105,0,0,230,231,5,109,0,0,231,232,5,112,
  	0,0,232,233,5,111,0,0,233,234,5,114,0,0,234,235,5,116,0,0,235,74,1,0,
  	0,0,236,237,5,114,0,0,237,238,5,101,0,0,238,239,5,116,0,0,239,240,5,117,
  	0,0,240,241,5,114,0,0,241,242,5,110,0,0,242,76,1,0,0,0,243,244,5,105,
  	0,0,244,245,5,110,0,0,245,246,5,116,0,0,246,78,1,0,0,0,247,248,5,99,0,
  	0,248,249,5,104,0,0,249,250,5,97,0,0,250,251,5,114,0,0,251,80,1,0,0,0,
  	252,253,5,102,0,0,253,254,5,108,0,0,254,255,5,111,0,0,255,256,5,97,0,
  	0,256,257,5,116,0,0,257,82,1,0,0,0,258,259,5,115,0,0,259,260,5,116,0,
  	0,260,261,5,114,0,0,261,262,5,105,0,0,262,263,5,110,0,0,263,264,5,103,
  	0,0,264,84,1,0,0,0,265,266,5,98,0,0,266,267,5,111,0,0,267,268,5,111,0,
  	0,268,269,5,108,0,0,269,270,5,101,0,0,270,271,5,97,0,0,271,272,5,110,
  	0,0,272,86,1,0,0,0,273,274,5,100,0,0,274,275,5,111,0,0,275,276,5,117,
  	0,0,276,277,5,98,0,0,277,278,5,108,0,0,278,279,5,101,0,0,279,88,1,0,0,
  	0,280,281,5,118,0,0,281,282,5,111,0,0,282,283,5,105,0,0,283,284,5,100,
  	0,0,284,90,1,0,0,0,285,287,5,45,0,0,286,285,1,0,0,0,286,287,1,0,0,0,287,
  	289,1,0,0,0,288,290,7,1,0,0,289,288,1,0,0,0,290,291,1,0,0,0,291,289,1,
  	0,0,0,291,292,1,0,0,0,292,293,1,0,0,0,293,295,5,46,0,0,294,296,7,1,0,
  	0,295,294,1,0,0,0,296,297,1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,
  	308,1,0,0,0,299,301,7,2,0,0,300,302,7,3,0,0,301,300,1,0,0,0,301,302,1,
  	0,0,0,302,304,1,0,0,0,303,305,7,1,0,0,304,303,1,0,0,0,305,306,1,0,0,0,
  	306,304,1,0,0,0,306,307,1,0,0,0,307,309,1,0,0,0,308,299,1,0,0,0,308,309,
  	1,0,0,0,309,311,1,0,0,0,310,312,7,4,0,0,311,310,1,0,0,0,311,312,1,0,0,
  	0,312,92,1,0,0,0,313,315,5,45,0,0,314,313,1,0,0,0,314,315,1,0,0,0,315,
  	317,1,0,0,0,316,318,7,1,0,0,317,316,1,0,0,0,318,319,1,0,0,0,319,317,1,
  	0,0,0,319,320,1,0,0,0,320,94,1,0,0,0,321,322,5,116,0,0,322,323,5,114,
  	0,0,323,324,5,117,0,0,324,331,5,101,0,0,325,326,5,102,0,0,326,327,5,97,
  	0,0,327,328,5,108,0,0,328,329,5,115,0,0,329,331,5,101,0,0,330,321,1,0,
  	0,0,330,325,1,0,0,0,331,96,1,0,0,0,332,336,5,34,0,0,333,335,8,5,0,0,334,
  	333,1,0,0,0,335,338,1,0,0,0,336,334,1,0,0,0,336,337,1,0,0,0,337,339,1,
  	0,0,0,338,336,1,0,0,0,339,340,5,34,0,0,340,98,1,0,0,0,341,345,7,6,0,0,
  	342,344,7,7,0,0,343,342,1,0,0,0,344,347,1,0,0,0,345,343,1,0,0,0,345,346,
  	1,0,0,0,346,100,1,0,0,0,347,345,1,0,0,0,348,350,5,13,0,0,349,348,1,0,
  	0,0,349,350,1,0,0,0,350,351,1,0,0,0,351,352,5,10,0,0,352,353,1,0,0,0,
  	353,354,6,50,0,0,354,102,1,0,0,0,355,357,7,8,0,0,356,355,1,0,0,0,357,
  	358,1,0,0,0,358,356,1,0,0,0,358,359,1,0,0,0,359,360,1,0,0,0,360,361,6,
  	51,0,0,361,104,1,0,0,0,17,0,128,139,286,291,297,301,306,308,311,314,319,
  	330,336,345,349,358,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  ironlexerLexerStaticData = std::move(staticData);
}

}

IronLexer::IronLexer(CharStream *input) : Lexer(input) {
  IronLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *ironlexerLexerStaticData->atn, ironlexerLexerStaticData->decisionToDFA, ironlexerLexerStaticData->sharedContextCache);
}

IronLexer::~IronLexer() {
  delete _interpreter;
}

std::string IronLexer::getGrammarFileName() const {
  return "Iron.g4";
}

const std::vector<std::string>& IronLexer::getRuleNames() const {
  return ironlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& IronLexer::getChannelNames() const {
  return ironlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& IronLexer::getModeNames() const {
  return ironlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& IronLexer::getVocabulary() const {
  return ironlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView IronLexer::getSerializedATN() const {
  return ironlexerLexerStaticData->serializedATN;
}

const atn::ATN& IronLexer::getATN() const {
  return *ironlexerLexerStaticData->atn;
}




void IronLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  ironlexerLexerInitialize();
#else
  ::antlr4::internal::call_once(ironlexerLexerOnceFlag, ironlexerLexerInitialize);
#endif
}
